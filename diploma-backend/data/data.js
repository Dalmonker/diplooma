const uuid = require("uuid");

const links = [
  {
    id: uuid.v4(),
    title: "Основы CSS",
    lessons: [
      {
        title:
          "1. Введение в CSS, его роль в веб-разработке. Подключение стилей",
        id: uuid.v4(),
        link: "/chto-takoe-css",
      },
      {
        title: "2. Простые селекторы, вложенность и вес селектора",
        id: uuid.v4(),
        link: "/add-styles",
      },
      {
        title: "3. Единицы измерения CSS, свойство display",
        id: uuid.v4(),
        link: "/selectors",
      },
      {
        title: "4. Размеры, отступы",
        id: uuid.v4(),
        link: "/units",
      },
      {
        title: "5. Знакомство с псевдоклассами и псевдоэлементами",
        id: uuid.v4(),
        link: "/display",
      },
      {
        title: "6. Организация отступов, сброс отступов",
        id: uuid.v4(),
        link: "/block-model",
      },
    ],
  },
  {
    id: uuid.v4(),
    title: "Использование",
    lessons: [
      {
        title: "1. Позиционирование элементов",
        id: uuid.v4(),
        link: "/position",
      },
      {
        title: "2. Обтекание, скролл и управление слоями",
        id: uuid.v4(),
        link: "/color-text",
      },
      {
        title: "3. Работа с цветом и текстом",
        id: uuid.v4(),
        link: "/fonts",
      },
      {
        title: "4. Подключение шрифтов, работа с веб-шрифтами",
        id: uuid.v4(),
        link: "/background",
      },
      { title: "5. Фон, границы и тени", id: uuid.v4(), link: "/size" },
      {
        title: "6. Межстрочный, межсимвольный интервал, выравнивание текста",
        id: uuid.v4(),
        link: "/list-item",
      },
      {
        title: "7. Размеры элементов",
        id: uuid.v4(),
        link: "/validity",
      },
      {
        title: "8. Списки и ссылки",
        id: uuid.v4(),
        link: "/validity",
      },
      {
        title: "9. Валидность CSS-кода, кодстайл CSS",
        id: uuid.v4(),
        link: "/validity",
      },
    ],
  },
  {
    id: uuid.v4(),
    title: "Задания",
    lessons: [
      {
        title: "Задание 1",
        id: uuid.v4(),
        link: "/task-one",
      },
      {
        title: "Задание 2",
        id: uuid.v4(),
        link: "/task-two",
      },
      {
        title: "Задание 3",
        id: uuid.v4(),
        link: "/task-three",
      },
    ],
  },
  // {
  //   id: uuid.v4(),
  //   title: "Продвинутые техники",
  //   lessons: [
  //     { title: "1. Flexbox", id: uuid.v4(), link: "/flexbox" },
  //     {
  //       title: "2. Комбинаторные селекторы и ключевые слова",
  //       id: uuid.v4(),
  //       link: "/selectors",
  //     },
  //     {
  //       title: "3. Псевдоклассы и псевдоэлементы",
  //       id: uuid.v4(),
  //       link: "/pceudo-class",
  //     },
  //     {
  //       title: "4. Кастомные свойства и кастомизация элементов формы",
  //       id: uuid.v4(),
  //       link: "/customization",
  //     },
  //     {
  //       title: "5. Transition и Transform",
  //       id: uuid.v4(),
  //       link: "/transition",
  //     },
  //     {
  //       title: "6. CSS-градиенты и CSS-функции",
  //       id: uuid.v4(),
  //       link: "/gradients",
  //     },
  //     { title: "7. БЭМ", id: uuid.v4(), link: "/bam" },
  //   ],
  // },
  // {
  //   id: uuid.v4(),
  //   title: "Адаптивность",
  //   lessons: [
  //     { title: "1. Виды верстки", id: uuid.v4(), link: "/kinds" },
  //     { title: "2. Pixel Perfect ", id: uuid.v4(), link: "/pixel-perfect" },
  //     { title: "3. Медиа-запросы ", id: uuid.v4(), link: "/media" },
  //     {
  //       title: "4. Адаптивные изображения ",
  //       id: uuid.v4(),
  //       link: "/adaptive-image",
  //     },
  //   ],
  // },
];

const lessons = [
  {
    slug: "chto-takoe-css",
    id: uuid.v4(),
    blocks: [
      {
        type: "lecture",
        data: {
          id: uuid.v4(),
          text: `# Что такое CSS и зачем его изучают
Бывало ли у вас такое, что при плохом интернет-соединении на веб-сайте сначала появлялся столбец с текстом и ссылками,
а затем только через некоторое время появлялись картинки и стилизованный дизайн страницы?
Это происходит из-за CSS, или каскадных таблиц стилей.
CSS - это инструмент, который определяет визуальное оформление элементов на веб-странице.
В нашей статье мы расскажем, что такое CSS, как он работает и зачем он нужен.

#### Стили – это набор определенных параметров, которые управляют внешним видом и расположением элементов веб-страницы.
Чтобы стало понятно, о чем идет речь, посмотрим на рис. 1.1.

![Logo](https://i.imgur.com/br7Lg0z.png "I am as caption")
*Рис. 1.1. Веб-страница, созданная только на HTML*

Данная веб-страница имеет простое оформление без каких-либо декоративных элементов. Однако при добавлении к ней стилевого оформления CSS тот же самый документ приобретает существенно отличный, более привлекательный внешний вид (см. рис. 1.2).

![Logo](https://i.imgur.com/nnLL1CJ.png "I am as caption")
*Рис. 1.2. Веб-страница, созданная на HTML и CSS*

Изменения значительны, поэтому заглянем в код, чтобы понять, в чем разница (пример 1.1).


\`\`\`
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Lorem</title>
    <meta charset="UTF-8" />
  </head>
  <body>
    <h2>Lorem ipsum</h2>
    <p>
      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cupiditate
      molestias deleniti ut aliquam perspiciatis dolorem veritatis, eveniet
      inventore iste, quas laborum ratione repellat incidunt totam hic assumenda
      molestiae amet. Odit!
    </p>
  </body>
</html>
\`\`\`
*Пример 1.1. Исходный код документа*

Теперь добавим тег <style>, который отвечает за добавлении CSS кода внутри HTML документа. Данный тег должен размещаться внутри тега head, однако это не обязательно – тег style можно разместить внутри тега body и это будет работать. Содержимое этого тега показано в примере 1.2.

\`\`\`
<style>
      body {
        font-family: Arial, Verdana, sans-serif; /* Семейство шрифтов */
        font-size: 11pt; /* Размер основного шрифта в пунктах  */
        background-color: #f0f0f0; /* Цвет фона веб-страницы */
        color: #333; /* Цвет основного текста */
      }
      h1 {
        color: #a52a2a; /* Цвет заголовка */
        font-size: 24pt; /* Размер шрифта в пунктах */
        font-family: Georgia, Times, serif; /* Семейство шрифтов */
        font-weight: normal; /* Нормальное начертание текста  */
      }
      p {
        text-align: justify; /* Выравнивание по ширине */
        margin-left: 60px; /* Отступ слева в пикселах */
        margin-right: 10px; /* Отступ справа в пикселах */
        border-left: 1px solid #999; /* Параметры линии слева */
        border-bottom: 1px solid #999; /* Параметры линии снизу */
        padding-left: 10px; /* Отступ от линии слева до текста  */
        padding-bottom: 10px; /* Отступ от линии снизу до текста  */
      }
    </style>`,
        },
      },
      {
        type: "test",
        data: {
          title:
            "Требуется задать цвет заголовка зелёным. Какое стилевое свойство подойдёт для этой цели?",
          // description: "Как убрать подчеркивание у ссылки?",
          id: uuid.v4(),
          variants: [
            { title: "font-color", id: uuid.v4() },
            { title: "color", id: "1" },
            { title: "font-family", id: uuid.v4() },
            { title: "font-size", id: uuid.v4() },
          ],
          answer: { title: "color", id: "1" },
        },
      },
      {
        type: "test",
        data: {
          title: "Как расшифровывается аббревиатура CSS?",
          // description:
          //   "С помощью какоего свойства можно разместить контент на всю ширину блока?",
          id: uuid.v4(),
          variants: [
            { title: "Colorful Style Sheets", id: uuid.v4() },
            { title: "Cascading Style Sheets", id: "1" },
            { title: "Computer Style Sheets", id: uuid.v4() },
            { title: "Creative Style Sheets", id: uuid.v4() },
          ],
          answer: { title: "Cascading Style Sheets", id: "1" },
        },
      },
    ],
  },
  {
    slug: "selectors",
    id: uuid.v4(),
    blocks: [
      {
        type: "lecture",
        data: {
          id: uuid.v4(),
          text: `# Что такое селекторы в CSS

**Селектор** (от англ. select — выбирать) — это шаблон, который позволяет обратиться к элементу или группе элементов веб-страницы, чтобы применить к ним стили CSS.
Его указывают перед блоком со свойствами:

\`\`\`
<style>
    a {
        text-decoration: none;
    }
</style>
\`\`\`

В примере выше селектор указывает на тег <a> (гиперссылка). Так мы говорим браузеру отключить подчёркивание у **всех ссылок** на странице, устанавливая для свойства text-decoration значение none.
Напишем HTML-код:

\`\`\`
<p>Содержание статьи:</p>
	<ul>
		<li><a href="#">Emmet на практике: пишем HTML</a></li>
		<li><a href="#">Создаём шапку документа</a></li>
		<li><a href="#">Подключаем стили и скрипты</a></li>
		<li><a href="#">Добавляем ссылки</a></li>
		<li><a href="#">Вводим теги</a></li>
	</ul>
\`\`\`

Вот как она выглядит в браузере:

![Logo](https://i.imgur.com/nnVJnRL.png "I am as caption")
*Рис. 2.1. Страница в браузере (без использования стилей написанных выше)*

Есть ненумерованный список со ссылками, которые браузер по умолчанию выделяет синим цветом и подчёркивает. Используем стили выше:

![Logo](https://i.imgur.com/pvQuajC.png "I am as caption")
*Рис. 2.2. Та же страница, но ссылки не подчёркнуты*

CSS-селектор работает! Но это, конечно, далеко не единственный способ обращения к элементам.

### Виды селекторов

Структура реальных проектов гораздо сложнее. Веб-страницы интернет-магазинов, корпоративных сайтов и блогов наполнены множеством вложенных и однотипных элементов — всем нужно задать уникальный дизайн. Если бы мы могли обращаться к ним только по названию, то даже с CSS веб оставался бы хранилищем скучного гипертекста.

К счастью, есть около 20 способов выбрать нужный элемент. Рассмотрим основные.

#### Универсальный селектор
Он применяет стили ко всем элементам страницы и обозначается символом * (звёздочка). С его помощью удобно сбрасывать отступы и задавать значение box‑sizing для всех блочных элементов:

\`\`\`
<style>
  * {
    margin: 0;
    box-sizing: border-box;
  }
</style>
\`\`\`

#### Селектор по тегу (элементу)
Этот селектор CSS применяет стили ко всем элементам с одинаковым тегом. Например, для всех <div>, <h2>, <p> и так далее.

Мы уже познакомились с ним, когда убирали подчёркивание у ссылок:

\`\`\`
<style>
  a {
      text-decoration: none;
    }
</style>
\`\`\`

#### Селектор по идентификатору (id)
Селектор по идентификатору обозначается символом # (решётка) и применяет стили к элементу, для которого задан атрибут id с соответствующим значением. При этом у элемента может быть только один id, и этот id должен быть уникальным в пределах веб-страницы.

\`\`\`
  <p id="intro">Сегодня мы расскажем вам об Emmet.</p> 
  <p id="article_content">В этой статье вы узнаете:</p>
\`\`\`

CSS-код:

\`\`\`
<style>
  #intro{
      color: red;
      font-weight: bold;
    }

  #article_content{
      font-family: sans-serif;
      font-weight: bold;
    }
</style>
\`\`\`

Текст в блоке p с идентификатором intro окрасится в красный, а текст с идентификатором article_content выделится жирным и получит шрифт без засечек:

![Logo](https://i.imgur.com/o8BcoeF.png "I am as caption")
*Рис. 2.3. Скриншот страницы*

#### Селектор по классу (class)
CSS-селектор по классу выбирает элементы, для которых назначен атрибут class с соответствующим значением. При этом один элемент может принадлежать нескольким классам — в таком случае их перечисляют через пробел:

\`\`\`
  <p class="plain_text article">Сегодня мы расскажем вам про Emmet.</p> 
\`\`\`

Абзац входит в классы plain_text и article. Значит, к нему применяются стили обоих классов:

\`\`\`
<style>
  .plain_text{
      font-size: 20px;
    }

  .article{
      font-family: "Montserrat"; 
    }
</style>
\`\`\`

#### Группа селекторов
CSS-селекторы можно сгруппировать, чтобы применить стили к нескольким группам и/или классам элементов. Для этого достаточно перечислить их через запятую:

\`\`\`
<style>
  .plain_text, p, h1, figure, div {
      margin-top: 0;
      margin-left: 0;
  }
</style>
\`\`\`
`,
        },
      },
      {
        type: "test",
        data: {
          title: "1",
          description: "descr",
          id: uuid.v4(),
          variants: [
            { title: "Вариант1", id: uuid.v4() },
            { title: "Вариант2", id: "1" },
            { title: "Вариант3", id: uuid.v4() },
          ],
          answer: { title: "Вариант2", id: "1" },
        },
      },
      {
        type: "test",
        data: {
          title: "1",
          description: "descr",
          id: uuid.v4(),
          variants: [
            { title: "Вариант1", id: uuid.v4() },
            { title: "Вариант2", id: "1" },
            { title: "Вариант3", id: uuid.v4() },
          ],
          answer: { title: "Вариант2", id: "1" },
        },
      },
    ],
  },
  {
    slug: "stilizaciya-tekta",
    id: uuid.v4(),
    blocks: [
      {
        type: "lecture",
        data: {
          id: uuid.v4(),
          text: `
          # Лекция: Стилизация текста в CSS

          ## Введение
          Добро пожаловать на лекцию по стилизации текста в CSS! В этой лекции мы рассмотрим различные способы изменения внешнего вида текста на веб-странице.
          
          ## Основные свойства стилизации текста
          В CSS существует несколько основных свойств, которые позволяют стилизовать текст:
          
          ### 1. \`font-family\`
          Свойство \`font-family\` позволяет задать шрифт для текста. Вы можете выбрать шрифт из предустановленных веб-шрифтов или использовать собственный шрифт, загруженный на сервер.
          
          ### 2. \`font-size\`
          Свойство \`font-size\` определяет размер шрифта. Вы можете указать размер в пикселях, процентах или других единицах измерения.
          
          ### 3. \`font-weight\`
          Свойство \`font-weight\` позволяет задать насыщенность шрифта. Вы можете использовать значения от \`normal\` до \`bold\` или числовые значения, чтобы указать конкретную насыщенность.
          
          ### 4. \`font-style\`
          Свойство \`font-style\` определяет стиль шрифта. Вы можете использовать значения \`normal\`, \`italic\` или \`oblique\` для изменения наклона шрифта.
          
          ### 5. \`text-decoration\`
          Свойство \`text-decoration\` позволяет добавить декоративные элементы к тексту, такие как подчеркивание, зачеркивание, линия над текстом и линия через текст.
          
          ### 6. \`text-transform\`
          Свойство \`text-transform\` позволяет изменить регистр текста. Вы можете использовать значения \`uppercase\`, \`lowercase\` или \`capitalize\` для изменения регистра букв.
          
          ## Пример использования свойств стилизации текста
          Давайте рассмотрим пример использования некоторых свойств стилизации текста:
        
          \`\`\`
          h1 {
            font-family: Arial, sans-serif;
            font-size: 24px;
            font-weight: bold;
            text-decoration: underline;
          }
          
          p {
            font-family: Verdana, sans-serif;
            font-size: 16px;
            font-style: italic;
            text-transform: uppercase;
          }
          \`\`\`
          
          В данном примере мы применяем стили к заголовку \`h1\` и абзацу \`p\`. Заголовок будет иметь шрифт Arial, размер 24 пикселя, жирное начертание и подчеркивание. Абзац будет иметь шрифт Verdana, размер 16 пикселей, курсивное начертание и текст в верхнем регистре.
          
          ## Заключение
          В этой лекции мы рассмотрели основные свойства стилизации текста в CSS. Помните, что правильное использование этих свойств поможет вам создавать красивые и читаемые веб-страницы. Удачи в изучении CSS!
        `,
        },
      },
    ],
  },
  // -----------
  {
    slug: "position",
    id: uuid.v4(),
    blocks: [
      {
        type: "lecture",
        data: {
          id: uuid.v4(),
          text: `# Позиционирование элементов
Чтобы создавать сложные макеты или интерактивные элементы, нужно управлять местоположением элементов на странице. Для этого есть CSS-свойство position. Оно определяет, где находится элемент на веб-странице.

Значения свойства position
Значения position:
* static — значение по умолчанию, элемент позиционируется в соответствии с его местом в потоке документа;
* relative — элемент позиционируется относительно своего исходного положения в потоке документа;
* absolute — элемент позиционируется относительно ближайшего родительского элемента, который имеет позиционирование, отличное от static;
* fixed — элемент позиционируется относительно окна браузера;
* sticky — элемент остаётся на месте при прокрутке страницы, но при этом может быть отодвинут от своей стандартной позиции.

**Static**

Static является значением по умолчанию для всех элементов и будет отображаться на странице в соответствии с порядком элемента в документе. Это значение используется редко и, как правило, не требует дополнительных параметров.
Пример использования свойства position со значением static:

\`\`\`
<style>
  #three {
    position: static;
    background: orange;
  }
</style>
<div class="box" id="one">Первый блок</div>
<div class="box" id="two">Второй</div>
<div class="box" id="three">Третий</div>
<div class="box" id="four">Четвёртый</div>
\`\`\`
*Пример 2.1. Использования свойства position со значением static*

![Logo](https://imgur.com/a/nCltAt2)
*Рис. 2.1. Position: static*

**Relative**

Relative определяет позиционирование элемента относительно его стандартного местоположения на странице. При использовании этого значения можно задать дополнительные параметры, такие как top, bottom, left и right, которые указывают на смещение элемента относительно его стандартного местоположения.

\`\`\`
<style>
  #two {
    position: relative;
    top: 20px;
    left: 20px;
    background: green;
  }
</style>
\`\`\`
*Пример 2.2. Использование свойства position со значением relative*

![Logo](https://diplooma-server.vercel.app/images/picture2.2.png "I am as caption")
*Рис. 2.2. Position: relative*

**Absolute**

Absolute задаёт точное местоположение элемента на странице, независимо от других элементов на странице.
При использовании значения можно задать параметры top, bottom, left и right, чтобы определить точное местоположение элемента.

\`\`\`
<style>
  #two {
    position: absolute;
    top: 40px;
    left: 20px;
    background: black;
  }
</style>
\`\`\`
*Пример 2.3. Использование свойства position со значением absolute*

![Logo](https://diplooma-server.vercel.app/images/picture2.3.png "I am as caption")
*Рис. 2.3. Position: absolute*

**Fixed**

Fixed задаёт элемент на фиксированном месте на странице, независимо от прокрутки страницы.
При использовании этого значения также можно задать параметры top, bottom, left и right, чтобы определить точное местоположение элемента.

\`\`\`
<style>
  #four {
    position: fixed;
    top: 40px;
    left: 10px;
    background: red;
  }
</style>
\`\`\`
*Пример 2.4. Использование свойства position со значением fixed*

![Logo](https://diplooma-server.vercel.app/images/picture2.4.png "I am as caption")
*Рис. 2.4. Position: fixed*

**Sticky**

Sticky начинает себя вести как обычный элемент до тех пор, пока не достигнет определенной позиции на странице, которую вы зададите с помощью свойства **top, right, bottom или left.
Как только элемент достигнет этой позиции при прокрутке страницы, он зафиксируется на месте и будет оставаться там до тех пор, пока пользователь не доскроллит страницу обратно.

\`\`\`
<style>
  #four {
    position: sticky;
    top: 30px;
    left: 10px;
    background: red;
  }
</style>
\`\`\`
*Пример 2.5. Использование свойства position со значением sticky*

![Logo](https://diplooma-server.vercel.app/images/picture2.5.png "I am as caption")
*Рис. 2.4. Position: sticky*

### Нюансы использования:
* Если у элемента значение свойства position установлено в absolute или fixed, то такой элемент будет выведен из обычного потока документа и может перекрыть другие элементы. Если это не предполагается, то нужно следить за порядком элементов на странице и настройками z-index.

* Если у элемента значение свойства position установлено в relative, то это не влияет на позиции других элементов на странице.

* Значение свойства position может также влиять на поведение других свойств, например, на позиционирование через top, left, bottom и right.

* Использование свойства position вместе с другими свойствами, например, transform или display, может дать неожиданные результаты и требует более тщательного тестирования на разных браузерах и устройствах.

* Значение sticky может привести к проблемам с доступностью. Если элемент со значением sticky перекрывает другие элементы на странице, это может затруднить доступ к этим элементам для людей, использующих скринридеры.
       
Перейти к выполнению [задания](https://codepen.io/skillbox_weblayout/pen/BaWNGEK).

`,
        },
      },
      {
        type: "test",
        data: {
          title: "Что делает свойство position: relative?",
          id: uuid.v4(),
          variants: [
            {
              title: "Устанавливает элемент относительно окна браузера",
              id: uuid.v4(),
            },
            {
              title:
                "Устанавливает элемент относительно его нормального положения",
              id: "1",
            },
            {
              title:
                "Устанавливает элемент относительно ближайшего предка с position: relative",
              id: uuid.v4(),
            },
            {
              title:
                "Устанавливает элемент относительно ближайшего предка с position: absolute",
              id: uuid.v4(),
            },
          ],
          answer: { title: "2", id: "1" },
        },
      },
      {
        type: "test",
        data: {
          title:
            "Какое значение свойства position используется для фиксирования элемента в определенной позиции в окне браузера, независимо от прокрутки страницы?",
          id: uuid.v4(),
          variants: [
            { title: "static", id: uuid.v4() },
            { title: "relative", id: uuid.v4() },
            { title: "absolute", id: uuid.v4() },
            { title: "fixed", id: "1" },
          ],
          answer: { title: "fixed", id: "1" },
        },
      },
      {
        type: "test",
        data: {
          title:
            "Какое свойство используется для перемещения элемента относительно его текущей позиции при position: relative?",
          id: uuid.v4(),
          variants: [
            { title: "float", id: uuid.v4() },
            { title: "margin", id: uuid.v4() },
            { title: "offset", id: uuid.v4() },
            { title: "top, right, bottom, left", id: "1" },
          ],
          answer: { title: "top, right, bottom, left", id: "1" },
        },
      },
    ],
  },

  //-----------

  {
    slug: "task-one",
    id: uuid.v4(),
    blocks: [
      {
        type: "lecture",
        data: {
          id: uuid.v4(),
          text: `# Стилизация веб-страницы с помощью CSS
### Макет страницы
Вы уже приступили к разработке первого сайта. 
В этом материале вы: 
* Закрепите на практике навыки работы с CSS-стилями и научитесь их подключать к сайту. 
* Добавите классы к элементам и стилизуете их. 
* Добавите отступы и закрепите тему блочной модели.
За шесть шагов вы стилизуете страницу **index.html**, макет которой представлен на изображении ниже:

![Logo](https://diplooma-server.vercel.app/images/task-test.png "I am as caption")
*Рис. 1.1 Итоговый результат*

1. Создание папки проекта и подключение стилей
Этот материал — часть практической работы, которая ждёт вас дальше. Поэтому вам будет удобнее, если вы сразу организуете работу с папками проекта правильно.

2. Создайте папку и скопируйте в неё все файлы из предыдущей практической работы. 
В основной папке создайте папку CSS для хранения файлов со стилями. Для стилизации разрабатываемой страницы вам понадобятся два файла: **normalize.css** и **style.css**. 
Чтобы создать и подключить файл **normalize.css**, выполните следующие действия:

3. Создайте файл **normalize.css** в папке CSS (это удобно делать в редакторе кода).
Скопируйте [CSS-код](https://necolas.github.io/normalize.css/8.0.1/normalize.css).
Вставьте скопированный код в файл **normalize.css**. Не забудьте сохранить его.
Чтобы создать и подключить файл **style.css**, выполните следующие действия:

4. Создайте файл **style.css** в папке CSS.
Скопируйте [CSS-код](https://drive.google.com/file/d/1Q1dyRG7k51v0RRsvWInSWBNmokUTBd7A/view) для базового сброса.
Вставьте скопированный код в файл **style.css**. Не забудьте сохранить его.

Подключите созданные файлы **normalize.css** и **style.css** в файле **index.html** внутри тега **<head>**, как показано на изображении ниже: 

![Logo](https://diplooma-server.vercel.app/images/task-tesk2.png "I am as caption")
*Рис. 1.2 Подключение стилей*

Важно:
* Соблюдайте строгую последовательность подключения стилей. Сначала подключается файл **normalize.css**, после — **style.css**.
* Вся дальнейшая стилизация будет выполняться в файле **style.css**.
Убедитесь, что структура проекта на этом этапе выглядит так:

![Logo](https://diplooma-server.vercel.app/images/task-tesk3.png "I am as caption")
*Рис. 1.3 Структура проекта*
После того как вы подготовили папку для проекта и подключили стили, переходите к стилизации страницы.


`,
        },
      },
    ],
  },
  {
    slug: "task-two",
    id: uuid.v4(),
    blocks: [
      {
        type: "lecture",
        data: {
          id: uuid.v4(),
          text: `# Практика по теме «Позиционирование»
В этой самостоятельной работе предлагаем попрактиковаться в использовании позиционирования элементов в вёрстке.           
Ваша **цель** — научиться применять свойства позиционирования.

Напоминаем: необходимая для выполнения работы информация есть в теоретическом материале.

Что нужно сделать?
Пройдите по [ссылке](https://codepen.io/skillbox_weblayout/pen/BaWNGEK).
Расположите плашку «Акция» в правом верхнем углу карточки, используя позиционирование. Также разместите блок поверх остального контента, используя соответствующее свойство.
Проверим себя?
В качестве самопроверки посмотрите, как должна выглядеть [готовая страница](https://drive.google.com/file/d/1KKwOPLl9Jm-OuGegSiQcCkfZ9i_7mBbe/view).


`,
        },
      },
    ],
  },
];

module.exports = {
  lessons,
  links,
};
